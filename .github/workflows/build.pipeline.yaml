name: Building case Pilar test

on:
  push:
    paths-ignore:
      - 'README.md'
      - 'pre-commit-config.yaml'

env:
  docker_image_name: 'case_pilar_api'
  docker_registry: 'registry.heroku.com'
  python_version: 3.12
  poetry_version: 1.8.1
  poetry_home: "/opt/poetry"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.python_version}}

      - name: Install poetry ${{env.poetry_version}}
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org | POETRY_HOME=${{env.poetry_home}} python3 - --version ${{env.poetry_version}}
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry --version

      - name: Install test dependencies
        shell: bash
        run: |
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry install --with test

      - name: Run unit tests
        shell: bash
        run: |
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry run pytest tests/ --cov . --cov-report html

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.python_version}}

      - name: Install poetry ${{env.poetry_version}}
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org | POETRY_HOME=${{env.poetry_home}} python3 - --version ${{env.poetry_version}}
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry --version

      - name: Install dev dependencies
        shell: bash
        run: |
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry install --only lint

      - name: Run ruff
        shell: bash
        continue-on-error: true
        run: |
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry run ruff check .

      - name: Run black
        shell: bash
        continue-on-error: true
        run: |
          export PATH="${{env.poetry_home}}/bin:$PATH"
          poetry run black . --check

      - name: Run hadolint
        shell: bash
        continue-on-error: true
        run: |
          docker pull hadolint/hadolint
          docker run --rm -i hadolint/hadolint < Dockerfile

  deploy:
    runs-on: ubuntu-latest
    needs:
      - test
      - lint

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com

      - name: Build docker image
        run: |
          docker build -t  ${{ env.docker_image_name }} \
            -t ${{ env.docker_registry }}/${{ secrets.HEROKU_APP_NAME }}/web .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.docker_image_name }}
          format: 'sarif'
          vuln-type: 'library'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.sarif'

      - name: Push docker image
        run: |
          docker push ${{ env.docker_registry }}/${{ secrets.HEROKU_APP_NAME }}/web

      - name: Release the application
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}

